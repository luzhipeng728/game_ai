"""Add scene requirements tables

Revision ID: 738f05485e83
Revises: 5da983fc0eff
Create Date: 2025-01-18 12:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '738f05485e83'
down_revision: Union[str, None] = '5da983fc0eff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scene_requirements',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('scene_id', sa.String(length=36), nullable=False),
    sa.Column('requirement_type', sa.Enum('ATTRIBUTE', 'CARD', 'NPC', 'ITEM', 'RELATIONSHIP', name='requirementtype'), nullable=False),
    sa.Column('requirement_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('operator', sa.Enum('GREATER_THAN', 'GREATER_EQUAL', 'LESS_THAN', 'LESS_EQUAL', 'EQUAL', 'NOT_EQUAL', 'IN', 'NOT_IN', name='comparisonoperator'), nullable=False),
    sa.Column('required_value', sa.JSON(), nullable=True),
    sa.Column('is_mandatory', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('allow_substitution', sa.Boolean(), nullable=True),
    sa.Column('substitution_rules', sa.JSON(), nullable=True),
    sa.Column('is_dynamic', sa.Boolean(), nullable=True),
    sa.Column('dynamic_formula', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scene_card_bindings',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('scene_id', sa.String(length=36), nullable=False),
    sa.Column('card_id', sa.String(length=36), nullable=False),
    sa.Column('binding_type', sa.String(length=50), nullable=False),
    sa.Column('max_uses_per_scene', sa.Integer(), nullable=True),
    sa.Column('cooldown_rounds', sa.Integer(), nullable=True),
    sa.Column('scene_effect_modifier', sa.Float(), nullable=True),
    sa.Column('special_effects', sa.JSON(), nullable=True),
    sa.Column('unlock_conditions', sa.JSON(), nullable=True),
    sa.Column('visibility_conditions', sa.JSON(), nullable=True),
    sa.Column('usage_reward_bonus', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scene_rewards_extended',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('scene_id', sa.String(length=36), nullable=False),
    sa.Column('success_attribute_points', sa.Integer(), nullable=True),
    sa.Column('success_experience', sa.Integer(), nullable=True),
    sa.Column('success_reputation', sa.Integer(), nullable=True),
    sa.Column('success_gold', sa.Integer(), nullable=True),
    sa.Column('failure_reputation', sa.Integer(), nullable=True),
    sa.Column('failure_gold', sa.Integer(), nullable=True),
    sa.Column('failure_attribute_penalty', sa.Integer(), nullable=True),
    sa.Column('reward_cards', sa.JSON(), nullable=True),
    sa.Column('card_reward_probability', sa.JSON(), nullable=True),
    sa.Column('reward_npcs', sa.JSON(), nullable=True),
    sa.Column('npc_reward_conditions', sa.JSON(), nullable=True),
    sa.Column('special_rewards', sa.JSON(), nullable=True),
    sa.Column('unlock_content', sa.JSON(), nullable=True),
    sa.Column('perfect_completion_bonus', sa.JSON(), nullable=True),
    sa.Column('time_bonus', sa.JSON(), nullable=True),
    sa.Column('efficiency_bonus', sa.JSON(), nullable=True),
    sa.Column('dynamic_reward_formula', sa.Text(), nullable=True),
    sa.Column('performance_multiplier', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['scene_id'], ['scenes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_npc_rewards',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('scene_reward_id', sa.String(length=36), nullable=False),
    sa.Column('npc_selection_type', sa.String(length=50), nullable=False),
    sa.Column('specific_npc_id', sa.String(length=36), nullable=True),
    sa.Column('npc_faction_filter', sa.String(length=50), nullable=True),
    sa.Column('npc_rarity_filter', sa.String(length=50), nullable=True),
    sa.Column('min_npc_count', sa.Integer(), nullable=True),
    sa.Column('max_npc_count', sa.Integer(), nullable=True),
    sa.Column('reward_conditions', sa.JSON(), nullable=True),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.Column('npc_level_bonus', sa.Integer(), nullable=True),
    sa.Column('npc_attribute_bonus', sa.JSON(), nullable=True),
    sa.Column('special_abilities', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['scene_reward_id'], ['scene_rewards_extended.id'], ),
    sa.ForeignKeyConstraint(['specific_npc_id'], ['player_npc_instances.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('card_rewards',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('scene_reward_id', sa.String(length=36), nullable=False),
    sa.Column('card_selection_type', sa.String(length=50), nullable=False),
    sa.Column('specific_card_id', sa.String(length=36), nullable=True),
    sa.Column('card_rarity_filter', sa.String(length=50), nullable=True),
    sa.Column('card_category_filter', sa.String(length=50), nullable=True),
    sa.Column('min_card_count', sa.Integer(), nullable=True),
    sa.Column('max_card_count', sa.Integer(), nullable=True),
    sa.Column('reward_conditions', sa.JSON(), nullable=True),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.Column('card_level_bonus', sa.Integer(), nullable=True),
    sa.Column('special_modifiers', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['scene_reward_id'], ['scene_rewards_extended.id'], ),
    sa.ForeignKeyConstraint(['specific_card_id'], ['cards.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('card_rewards')
    op.drop_table('player_npc_rewards')
    op.drop_table('scene_rewards_extended')
    op.drop_table('scene_card_bindings')
    op.drop_table('scene_requirements')
    # ### end Alembic commands ###